Index: Utils.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from tkinter import *\r\nimport PIL\r\nfrom PIL import ImageTk, Image\r\n\r\n\r\ndef load_img(img_path, img_width, img_height):\r\n    img_width = int(img_width)\r\n    img_height = int(img_height)\r\n    img = Image.open(img_path)\r\n    img = img.resize((img_height, img_width), PIL.Image.ANTIALIAS)\r\n    photo = ImageTk.PhotoImage(img)\r\n    return photo
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Utils.py	(revision 70e43fae0927ab568459c1c4fc5b4895128f4471)
+++ Utils.py	(date 1638927218921)
@@ -7,6 +7,6 @@
     img_width = int(img_width)
     img_height = int(img_height)
     img = Image.open(img_path)
-    img = img.resize((img_height, img_width), PIL.Image.ANTIALIAS)
+    img = img.resize((img_width, img_height), PIL.Image.ANTIALIAS)
     photo = ImageTk.PhotoImage(img)
     return photo
\ No newline at end of file
Index: Classes.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import tkinter as tk\r\nfrom tkinter import *\r\nfrom tkinter import ttk\r\nfrom Utils import *\r\nimport PIL\r\nfrom PIL import ImageTk, Image\r\n\r\n\r\nclass GameWindow(tk.Toplevel):\r\n    def __init__(self, parent):\r\n        super().__init__(parent)\r\n\r\n        self.canvas = Canvas(self, bd=0, highlightthickness=0)\r\n        self.canvas.pack(fill=BOTH, expand=1)\r\n\r\n        self.config_lintener()\r\n        self.canvas.bind(\"<Configure>\", self.config_lintener)\r\n\r\n    def refresh_canvas(self):\r\n        self.canvas.delete(\"all\")\r\n        self.canvas.create_image(self.width - self.button_width/2, self.height - self.button_height/2, image = self.img_Up)\r\n\r\n    def config_lintener(self, *args):\r\n        self.width = self.winfo_screenwidth()\r\n        self.height = self.winfo_screenheight()\r\n        self.button_width = self.width / 10\r\n        self.button_height = self.height / 10\r\n\r\n        self.img_Up = load_img(\"./img/Up.png\", self.button_width, self.button_height)\r\n        self.img_Down = load_img(\"./img/Down.png\", self.button_width, self.button_height)\r\n        self.img_Left = load_img(\"./img/Left.png\", self.button_width, self.button_height)\r\n        self.img_Right = load_img(\"./img/Right.png\", self.button_width, self.button_height)\r\n        self.img_Next = load_img(\"./img/Next.png\", self.button_width, self.button_height)\r\n        self.img_Delete = load_img(\"./img/Delete.png\", self.button_width, self.button_height)\r\n\r\n        self.refresh_canvas()\r\n\r\nclass App(tk.Tk):\r\n    def __init__(self):\r\n        super().__init__()\r\n\r\n        self.geometry('300x200')\r\n        self.title('Main Window')\r\n\r\n        # place a button on the root window\r\n        ttk.Button(self,\r\n                text='Open a window',\r\n                command=self.open_window).pack(expand=True)\r\n\r\n    def open_window(self):\r\n        window = GameWindow(self)\r\n        window.grab_set()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Classes.py	(revision 70e43fae0927ab568459c1c4fc5b4895128f4471)
+++ Classes.py	(date 1638943992917)
@@ -7,46 +7,199 @@
 
 
 class GameWindow(tk.Toplevel):
+    button_width_arrow = 40
+    button_height_arrow = 40
+    button_width_next = 120
+    button_height_next = 40
+    player_width = 20
+    player_height = 20
+    initial_width = 300
+    initial_height = 200
+    width_ratio = 0.25
+    height_ratio = 0.5
+
     def __init__(self, parent):
         super().__init__(parent)
+        self.geometry(str(GameWindow.initial_width) + 'x' + str(GameWindow.initial_height))
 
         self.canvas = Canvas(self, bd=0, highlightthickness=0)
         self.canvas.pack(fill=BOTH, expand=1)
 
-        self.config_lintener()
-        self.canvas.bind("<Configure>", self.config_lintener)
+        self.next_exist = False
+
+        self.width = self.winfo_screenwidth()
+        self.height = self.winfo_screenheight()
+
+        self.player_x = self.player_width/2
+        self.player_y = self.player_height / 2
+        self.player_v = self.width / 100
+
+        self.buttons = {}
+        self.make_buttons()
+        self.refresh_canvas()
+        self.canvas.bind("<Configure>", self.config_listener)
+
+    def make_buttons(self):
+        self.buttons['Up'] = GameButton(self, "./img/Up.png",
+                                        GameWindow.button_width_arrow, GameWindow.button_height_arrow,
+                                        self.up_clicked, GameWindow.width_ratio, 0, GameWindow.height_ratio, -1
+                                        )
+        self.buttons['Down'] = GameButton(self, "./img/Down.png",
+                                          GameWindow.button_width_arrow, GameWindow.button_height_arrow,
+                                          self.down_clicked, GameWindow.width_ratio, 0, GameWindow.height_ratio, 1
+                                          )
+        self.buttons['Left'] = GameButton(self, "./img/Left.png",
+                                          GameWindow.button_width_arrow, GameWindow.button_height_arrow,
+                                          self.left_clicked, GameWindow.width_ratio, -1, GameWindow.height_ratio, 0
+                                          )
+        self.buttons['Right'] = GameButton(self, "./img/Right.png",
+                                           GameWindow.button_width_arrow, GameWindow.button_height_arrow,
+                                           self.right_clicked, GameWindow.width_ratio, 1, GameWindow.height_ratio, 0
+                                           )
+        self.buttons['Next'] = GameButton(self, "./img/Right.png",
+                                          GameWindow.button_width_arrow, GameWindow.button_height_arrow,
+                                          self.right_clicked, GameWindow.width_ratio, 1, GameWindow.height_ratio, 0
+                                          )
+        self.buttons['Delete'] = GameButton(self, "./img/Right.png",
+                                            GameWindow.button_width_next, GameWindow.button_height_next,
+                                            self.right_clicked, GameWindow.width_ratio, 1.2, GameWindow.height_ratio, 0
+                                            )
+
+    # def load_images(self):
+    #     self.img_Up = load_img("./img/Up.png",
+    #                            self.cal_width(GameWindow.button_width_arrow),
+    #                            self.cal_height(GameWindow.button_height_arrow)
+    #                            )
+    #     self.img_Down = load_img("./img/Down.png",
+    #                              self.cal_width(GameWindow.button_width_arrow),
+    #                              self.cal_height(GameWindow.button_height_arrow)
+    #                              )
+    #     self.img_Left = load_img("./img/Left.png",
+    #                              self.cal_width(GameWindow.button_width_arrow),
+    #                              self.cal_height(GameWindow.button_height_arrow)
+    #                              )
+    #     self.img_Right = load_img("./img/Right.png",
+    #                               self.cal_width(GameWindow.button_width_arrow),
+    #                               self.cal_height(GameWindow.button_height_arrow)
+    #                               )
+    #     self.img_Delete = load_img("./img/Delete.png",
+    #                                self.cal_width(GameWindow.button_width_arrow),
+    #                                self.cal_height(GameWindow.button_height_arrow)
+    #                                )
+    #     self.img_Next = load_img("./img/Next.png",
+    #                              self.cal_width(GameWindow.button_width_next),
+    #                              self.cal_height(GameWindow.button_height_next)
+    #                              )
+
+    # def draw_images(self):
+    #     self.canvas.create_image(
+    #         self.width / GameWindow.width_ratio,
+    #         self.height / 2 - self.cal_height(GameWindow.button_height_arrow),
+    #         image=self.img_Up
+    #     )
+    #     self.canvas.create_image(
+    #         self.width / GameWindow.width_ratio,
+    #         self.height / 2 + self.cal_height(GameWindow.button_height_arrow),
+    #         image=self.img_Down
+    #     )
+    #     self.canvas.create_image(
+    #         self.width / GameWindow.width_ratio - self.cal_width(GameWindow.button_width_arrow),
+    #         self.height / 2,
+    #         image=self.img_Left
+    #     )
+    #     self.canvas.create_image(
+    #         self.width / GameWindow.width_ratio + self.cal_width(GameWindow.button_width_arrow),
+    #         self.height / 2,
+    #         image=self.img_Right
+    #     )
+    #     self.canvas.create_image(
+    #         self.width / GameWindow.width_ratio,
+    #         self.height / 2,
+    #         image=self.img_Delete
+    #     )
+    #     if self.next_exist is False:
+    #         self.canvas.create_image(
+    #             self.width / GameWindow.width_ratio + self.cal_width(GameWindow.button_width_next) * 1.2,
+    #             self.height / 2,
+    #             image=self.img_Next
+    #         )
 
     def refresh_canvas(self):
         self.canvas.delete("all")
-        self.canvas.create_image(self.width - self.button_width/2, self.height - self.button_height/2, image = self.img_Up)
-
-    def config_lintener(self, *args):
-        self.width = self.winfo_screenwidth()
-        self.height = self.winfo_screenheight()
-        self.button_width = self.width / 10
-        self.button_height = self.height / 10
+        for btn in self.buttons.values():
+            btn.update()
 
-        self.img_Up = load_img("./img/Up.png", self.button_width, self.button_height)
-        self.img_Down = load_img("./img/Down.png", self.button_width, self.button_height)
-        self.img_Left = load_img("./img/Left.png", self.button_width, self.button_height)
-        self.img_Right = load_img("./img/Right.png", self.button_width, self.button_height)
-        self.img_Next = load_img("./img/Next.png", self.button_width, self.button_height)
-        self.img_Delete = load_img("./img/Delete.png", self.button_width, self.button_height)
-
+    def config_listener(self, event):
+        self.width = event.width
+        self.height = event.height
         self.refresh_canvas()
 
-class App(tk.Tk):
-    def __init__(self):
-        super().__init__()
+    def cal_width(self, origin_width):
+        return origin_width * self.width / GameWindow.initial_width
+
+    def cal_height(self, origin_height):
+        return origin_height * self.height / GameWindow.initial_height
+
+    def next_clicked(self):
+        self.next_window = GameWindow(self)
+
+    def right_clicked(self):
+        self.next_window.right_received()
+
+    def right_received(self):
+        self.player_x += self.player_v
+
+    def left_clicked(self):
+        self.next_window.left_received()
+
+    def left_received(self):
+        self.player_x -= self.player_v
+
+    def up_clicked(self):
+        self.next_window.up_received()
+
+    def up_received(self):
+        self.player_y -= self.player_v
+
+    def down_clicked(self):
+        self.next_window.down_received()
+
+    def down_received(self):
+        self.player_y += self.player_v
+
+    def delete_clicked(self):
+        self.destroy()
+
+
+class GameButton:
+    def __init__(self, root, img_path, img_width, img_height, command, width_c, btn_width_c, height_c, btn_height_c):
+        self.root = root
+        self.width = self.initial_width = int(img_width)
+        self.height = self.initial_height = int(img_height)
+        self.img_path = img_path
+        self.command = command
+
+        self.width_c = width_c
+        self.btn_width_c = btn_width_c
+        self.height_c = height_c
+        self.btn_height_c = btn_height_c
+        self.x = 0
+        self.y = 0
+
+        self.img = self.img_origin = Image.open(img_path)
+        self.photo = ImageTk.PhotoImage(self.img)
+        self.update()
 
-        self.geometry('300x200')
-        self.title('Main Window')
+    def update(self):
+        self.width = int(self.root.cal_width(self.initial_width))
+        self.height = int(self.root.cal_height(self.initial_height))
+        self.x = self.root.width * self.width_c + self.width * self.btn_width_c
+        self.y = self.root.height * self.height_c + self.height * self.btn_height_c
 
-        # place a button on the root window
-        ttk.Button(self,
-                text='Open a window',
-                command=self.open_window).pack(expand=True)
+        self.img = self.img_origin.resize((self.width, self.height), PIL.Image.ANTIALIAS)
+        self.photo = ImageTk.PhotoImage(self.img)
 
-    def open_window(self):
-        window = GameWindow(self)
-        window.grab_set()
\ No newline at end of file
+        self.root.canvas.create_image(self.x, self.y, image=self.photo)
+
+    def clicked(self):
+        self.command(self.root)
Index: PressControl.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from Utils import *\r\nfrom Classes import *\r\nimport tkinter as tk\r\nfrom tkinter import *\r\n\r\napp = App()\r\napp.mainloop()\r\n\r\n#app.mainloop()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PressControl.py	(revision 70e43fae0927ab568459c1c4fc5b4895128f4471)
+++ PressControl.py	(date 1638937174718)
@@ -3,7 +3,13 @@
 import tkinter as tk
 from tkinter import *
 
-app = App()
-app.mainloop()
+Frames = []
 
-#app.mainloop()
+root = tk.Tk()
+Frames.append(root)
+for i in range(0, 1):
+    Frames.append(GameWindow(Frames[i]))
+    Frames[i+1].title("frame"+ str(i))
+    root.update()
+
+root.mainloop()
